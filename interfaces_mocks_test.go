// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package traefik_fallback_plugin_test is a generated GoMock package.
package traefik_fallback_plugin_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	traefik_fallback_plugin "github.com/skynet2/traefik-fallback-plugin"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// CanFetch mocks base method.
func (m *MockFetcher) CanFetch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanFetch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanFetch indicates an expected call of CanFetch.
func (mr *MockFetcherMockRecorder) CanFetch() *FetcherCanFetchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanFetch", reflect.TypeOf((*MockFetcher)(nil).CanFetch))
	return &FetcherCanFetchCall{Call: call}
}

// FetcherCanFetchCall wrap *gomock.Call
type FetcherCanFetchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FetcherCanFetchCall) Return(arg0 bool) *FetcherCanFetchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FetcherCanFetchCall) Do(f func() bool) *FetcherCanFetchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FetcherCanFetchCall) DoAndReturn(f func() bool) *FetcherCanFetchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fetch mocks base method.
func (m *MockFetcher) Fetch(ctx context.Context) (*traefik_fallback_plugin.CacheRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].(*traefik_fallback_plugin.CacheRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFetcherMockRecorder) Fetch(ctx interface{}) *FetcherFetchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFetcher)(nil).Fetch), ctx)
	return &FetcherFetchCall{Call: call}
}

// FetcherFetchCall wrap *gomock.Call
type FetcherFetchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FetcherFetchCall) Return(arg0 *traefik_fallback_plugin.CacheRecord, arg1 error) *FetcherFetchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FetcherFetchCall) Do(f func(context.Context) (*traefik_fallback_plugin.CacheRecord, error)) *FetcherFetchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FetcherFetchCall) DoAndReturn(f func(context.Context) (*traefik_fallback_plugin.CacheRecord, error)) *FetcherFetchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
